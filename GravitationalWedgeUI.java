/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gravitationalwedge;


import unusedClasses.DataGenerator;
import unusedClasses.DataReader;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.management.timer.Timer.ONE_SECOND;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Edward
 */
public class GravitationalWedgeUI extends javax.swing.JFrame {
    static double shift,amp,maxTime,xPos,yPos,xVel,yVel,accel,inc,energy,CumKinEnergy;
    
    String saveFile;
    DataGenerator dg;
    DataReader dr;
    Boundary boun;
    
    
    
    
    /**
     * Creates new form GravitationalWedgeUI
     */
    public GravitationalWedgeUI() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ampField = new javax.swing.JTextField();
        shiftField = new javax.swing.JTextField();
        accField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        xPosField = new javax.swing.JTextField();
        xVelField = new javax.swing.JTextField();
        yVelField = new javax.swing.JTextField();
        timeField = new javax.swing.JLabel();
        TimeField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        incField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        yPosField = new javax.swing.JTextField();
        fajkl = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        Start = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        particleData = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        chart = new gravitationalwedge.Charter();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Initial Conditions"));

        jLabel1.setText("Amplitude");

        jLabel2.setText("Shift");

        jLabel3.setText("Acceleration");

        jLabel4.setText("X Position");

        jLabel5.setText("X Velocity");

        jLabel6.setText("Y Velocity");

        timeField.setText("Time");

        jLabel7.setText("Increment");

        jLabel8.setText("Y Position");

        fajkl.setText("Save in:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(shiftField, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(ampField)
                    .addComponent(accField))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xPosField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yPosField)))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(yVelField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(incField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(xVelField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(timeField)
                                .addGap(18, 18, 18)
                                .addComponent(TimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fajkl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameField)))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ampField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(xPosField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeField)
                    .addComponent(TimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(xVelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(shiftField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(yVelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(yPosField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(incField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(accField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fajkl)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        Start.setText("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        particleData.setColumns(20);
        particleData.setRows(5);
        particleData.setText("uninitialized");
        jScrollPane1.setViewportView(particleData);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout chartLayout = new javax.swing.GroupLayout(chart);
        chart.setLayout(chartLayout);
        chartLayout.setHorizontalGroup(
            chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        chartLayout.setVerticalGroup(
            chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 311, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Start)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(Start)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {                                      
        try {                                   
            //TODO add your handling code here:
            
            shift=Double.parseDouble(shiftField.getText());
            accel=Double.parseDouble(accField.getText());
            amp=Double.parseDouble(ampField.getText());
            xPos=Double.parseDouble(xPosField.getText());
            yPos=Double.parseDouble(yPosField.getText());
            xVel=Double.parseDouble(xVelField.getText());
            yVel=Double.parseDouble(yVelField.getText());
            
            maxTime=Double.parseDouble(TimeField.getText());
            inc=Double.parseDouble(incField.getText());
            saveFile=nameField.getText();
            
            energy=accel*yPos+.5*(xVel*xVel+yVel*yVel);
            
           
            //accel = -10;
            
            //boundary conditions
            boun 
            //= new WedgeBoundary(1/Math.tan(90*Math.PI/360),-10,10,10);
            = new QuadraticBoundary(amp,shift,accel);
            //= new WedgeBoundary(amp,accel);
            //= new WedgeBoundary(1,-10);
            //= new ParabolicBoundary(.05,-10);
            
            //boun = new AsymBoundary(.00001,86602.5404,.00001,86602.5404,-1);
            //boun = new QuadraticBoundary(.00001,86602.5404,-1);
                    
            //Array of particles declaration
            //final Particle[] pAry = new Particle[15];
            //for(int i=0;i<pAry.length;i++){
            //    pAry[i]=new Particle(-5,boun.function(-5),3*Math.cos((i+6)*5*Math.PI/180),3*Math.sin((i+6)*5*Math.PI/180),-1,boun);
            //}
            
            //final Particle[][] pMat = new Particle[6][8];
            /*for(int i=0;i<pMat.length;i++){
                for(int j=0;j<pMat[0].length;j++){
                    pMat[i][j]=new Particle(xPos,yPos,xVel,yVel,accel,new QuadraticBoundary(j+1,i+1,accel));
                }
            }*/
            
            final Particle p=new Particle(xPos,yPos,xVel,yVel,accel,boun);
            //chart.setBounds(0,amp*shift*shift,-Math.sqrt(-2*accel*amp*shift*shift),Math.sqrt(-2*accel*amp*shift*shift));
            
            /*for(double d=-shift;d<shift;d+=2*shift/100.0){
                chart.addPoint(d,boun.function(d));
            }*/
            //t.start();
            
            //while(p.time<=maxTime){
                
            //t.run();
            
            double good = 0, height = 4;
            
            Timer timer;
            timer = new Timer(1000, new ActionListener() {
                int counter=0;
                @Override
                public void actionPerformed(ActionEvent evt) {
                    chart.revalidate();
                    
                    //for(Particle p: pAry){
                        //System.out.println(p.time);
                        if (p.time<maxTime) {
                            try {
                                //boolean success=p.timeUpdate(inc);
                                //System.out.println(success);
                                //if(!success)

                                counter=0;
                                while(counter!=1000){
                                    //System.out.println(counter+" "+p.pos_X+" "+p.pos_Y+" "+p.vel_X+" "+p.vel_Y+" "+p.b.nextBounce(p)+" "+p.energy());
                                    counter++;

                                    double tempTime = p.time;
                                    double timeUp=p.b.nextBounce(p);
                                    
                                    p.bounceUpdate(p.b.nextBounce(p));
                                    //chart.addPoint(Math.sqrt(p.pos_X*p.pos_X+p.pos_Y*p.pos_Y),(p.pos_X*p.vel_X+p.pos_Y*p.vel_Y)/Math.sqrt(p.pos_X*p.pos_X+p.pos_Y*p.pos_Y));
                                    //System.out.println(timeUp);
                                    //System.out.println(p);
                                    
                                    
                                    
                                    //double y=p.pos_Y-(p.vel_Y*p.pos_X/p.vel_X)+.5*p.accel*p.pos_X*p.pos_X/p.vel_X/p.vel_X;
                                    //double vely=p.vel_Y-p.accel*p.pos_X/p.vel_X;
                                    //System.out.println(timeUp);
                                    Particle temp = new Particle(p);
                                    boolean b1 = (p.pos_X<0^p.vel_X<0), b2= temp.timeUpdate(-1*p.pos_X/p.vel_X);
                                    if(b1&&b2)chart.addPoint(temp.pos_Y,temp.vel_Y);
                                    //else System.out.println(b1+" "+b2);
                                    
                                    //chart.addPoint(p.pos_X,p.pos_Y);
                                    
                                    //if(timeUp<inc)
                                    //p.bounceUpdate(timeUp);
                                    //else p.bounceUpdate(inc);
                                   
                                    //if(counter == 1000)System.out.println(p.time);
                                    //else{ System.out.println(p);}


                                    /*System.out.println(CumKinEnergy);
                                    CumKinEnergy += -(1/3/accel*Math.pow(p.vel_Y,3))
                                                    +(p.vel_X*p.vel_X*(timeUp)+1/3/accel*Math.pow(p.vel_Y+accel*(timeUp),3));
                                    p.bounceUpdate(timeUp);
                                    if(p.time<50000)
                                    chart.addPoint(p.time,CumKinEnergy/p.time);
                                    if(counter==1000)particleData.setText("Time: "+p.time+"\nEnergy: "+p.energy()+"\nAverage Kinetic Energy: "+
                                            CumKinEnergy/p.time+"\nFraction of Total Energy: "+CumKinEnergy/p.time/p.energy());*/
                                    //System.out.println(p.time+" "+p.energy()+" "+CumKinEnergy+" "+CumKinEnergy/p.time);
                                    



                                    
                                    //if(b1 && b2)
                                        //chart.addPoint(temp.time,.5*temp.vel_Y*temp.vel_Y+.5*temp.vel_X*temp.vel_X);
                                    //else;
                                        //System.out.println(counter+" "+p.pos_X+" "+p.pos_Y+" "+p.vel_X+" "+p.vel_Y+" "+b1+" "+b2+" "+p.b.nextBounce(p));
                                }

                                //System.out.println(chart.xAxisMin+" "+chart.yAxisMin);
                                //System.out.println(energy-accel*yPos-.5*(xVel*xVel+yVel*yVel));
                                //if(chart.xValues.size()%1000==0);
                                repaint();//repaints the gui to update
                                //System.out.println(chart.xAxisMax+" "+chart.xAxisMin+" "+chart.yAxisMax+" "+chart.yAxisMin);
                            } 
                            catch(Exception E){
                                System.out.println("A wild exception appears!");
                            }
                        }
                    //}
                }
                
            }); 
            timer.start();
              
            
                
            
            //}
            
            
            
        } catch (IOException ex) {
            Logger.getLogger(GravitationalWedgeUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*try {
            guiUpdate(saveFile);
        } catch (InterruptedException | IOException ex) {
            Logger.getLogger(GravitationalWedgeUI.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }                                     

    private void guiUpdate(String s) throws InterruptedException, FileNotFoundException, IOException{
        //dr=new DataReader(s,inc,boun);
        Particle temp=dr.next();
        //Thread t=new Thread(new DataUpdate());
        //t.start();
        
            
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        shift=amp=maxTime=xPos=xVel=yVel=accel=inc=CumKinEnergy=0;
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GravitationalWedgeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GravitationalWedgeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GravitationalWedgeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GravitationalWedgeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new GravitationalWedgeUI().setVisible(true);
            }
        });
        
        
        
        
        
        
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton Start;
    private javax.swing.JTextField TimeField;
    private javax.swing.JTextField accField;
    private javax.swing.JTextField ampField;
    private gravitationalwedge.Charter chart;
    private javax.swing.JLabel fajkl;
    private javax.swing.JTextField incField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextArea particleData;
    private javax.swing.JTextField shiftField;
    private javax.swing.JLabel timeField;
    private javax.swing.JTextField xPosField;
    private javax.swing.JTextField xVelField;
    private javax.swing.JTextField yPosField;
    private javax.swing.JTextField yVelField;
    // End of variables declaration                   

    class DataUpdate implements Runnable
{
     Particle p;
     double t;
     
     private DataUpdate(Particle p1,double time){
         p=p1;
         t=time;
     }
        @Override
     public void run(){
        /*while(p!=null){
                particleData.setText("Time: "+p.time+"\nX: "+p.pos_X+"\nY: "+p.pos_Y+
                "\nX Velocity:"+p.vel_X+"\nY Velocity: "+p.vel_Y+"\n Acceleration: "
                +p.accel);
                try {
                    p=dr.next();
                } catch (IOException ex) {
                    Logger.getLogger(GravitationalWedgeUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GravitationalWedgeUI.class.getName()).log(Level.SEVERE, null, ex);
                }
        }*/
        
         //Thread.sleep(100);
         while(p.time<t){
           //p.bounceUpdate(p.b.nextBounce(p));
           chart.addPoint(p.pos_Y,p.vel_Y);
           System.out.println("debug");
             try {
                 sleep(1);
             } catch (InterruptedException ex) {
                 Logger.getLogger(GravitationalWedgeUI.class.getName()).log(Level.SEVERE, null, ex);
             }
             chart.repaint();
         }
         
        
        
        
        repaint();
        revalidate();
    }
    }
    
}

